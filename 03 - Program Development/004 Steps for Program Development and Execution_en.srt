1
00:00:00,350 --> 00:00:02,090
this is a important video.here we will

2
00:00:02,090 --> 00:00:09,900
the steps involved in development and execution of a program so development and execution of a

3
00:00:09,900 --> 00:00:10,280
program.

4
00:00:10,310 --> 00:00:13,360
So what are the steps we will learn about those steps in detail.

5
00:00:13,590 --> 00:00:18,520
So we will not be learning again and again but we will be using these steps every time when we are writing

6
00:00:18,520 --> 00:00:19,130
an program.

7
00:00:19,980 --> 00:00:24,290
So what are the steps involve let us see. first step is editing.

8
00:00:24,360 --> 00:00:29,160
Second is compiling third linking libraries then loading and execution.

9
00:00:29,870 --> 00:00:32,940
So let us pick up the first one.

10
00:00:33,830 --> 00:00:35,300
So let us pick up the first one.

11
00:00:35,390 --> 00:00:42,890
Editing means typing a program. where do you type the program so you can type a program in any text editor but

12
00:00:42,950 --> 00:00:47,180
after typing you have to compile link and also you will be executing.

13
00:00:47,180 --> 00:00:48,180
So that is difficult.

14
00:00:48,650 --> 00:00:56,780
So we want all these things at one place editing a program compiling a program linking libraries loading

15
00:00:56,780 --> 00:01:00,260
and execution all these should be together at one place.

16
00:01:00,290 --> 00:01:01,720
So what is that place.

17
00:01:01,730 --> 00:01:08,180
So the softwares are available for performing all these things together at one place those software are

18
00:01:08,180 --> 00:01:17,030
called as I D E integrated development environment development involves these things so integrated means

19
00:01:17,030 --> 00:01:19,710
all these things together at one place.

20
00:01:19,880 --> 00:01:26,960
So I.DE is out there so we use IDE for programming whether it is C language C++ Java any language

21
00:01:26,960 --> 00:01:33,140
we use I.DE. so for every language there is a different IDE available and some IDE are there for all

22
00:01:33,140 --> 00:01:34,490
programming languages.

23
00:01:34,500 --> 00:01:41,650
So to name a few ideas for C++ we have I.DE. that is turbo C++.

24
00:01:41,720 --> 00:01:45,050
This works for C language as well as a C++.

25
00:01:45,050 --> 00:01:48,530
Then we have devC++, Dev CPB.

26
00:01:48,770 --> 00:01:57,410
This also for C++ as well as C languages both the languages which supports right and Xcode, codeblocks

27
00:01:58,190 --> 00:02:01,450
and Eclipse, visual studio.

28
00:02:03,050 --> 00:02:05,870
This is from Microsoft.

29
00:02:06,170 --> 00:02:13,250
So so on. SO many IDE are available these are available provided by different software vendor.

30
00:02:13,250 --> 00:02:18,860
So software development companies they have their own version of IDE whichever what you are comfortable

31
00:02:18,860 --> 00:02:24,440
you can use that if you are very new to programming then you can select Dev C++ right.

32
00:02:24,580 --> 00:02:31,760
And if you're using Mac machine then you can go for X code ot codeblocks you can use any of these

33
00:02:31,850 --> 00:02:33,760
IDE which are what you work on.

34
00:02:33,830 --> 00:02:34,300
Right.

35
00:02:34,340 --> 00:02:41,830
Mostly in India in colleges they use Turbo C++ for teaching C C++ programming.

36
00:02:41,840 --> 00:02:44,360
The students in the college laboratory.

37
00:02:44,360 --> 00:02:48,060
They use this one or else they use a Linux upon Linux.

38
00:02:48,070 --> 00:02:49,970
Also you can use the GCC compiler.

39
00:02:51,080 --> 00:02:53,860
I am using x code in my course.

40
00:02:53,930 --> 00:02:58,660
The reason of using x Code is is easy for explanation purpose right.

41
00:02:59,210 --> 00:03:07,240
But in the next section you will find how to install all these things not a few more things when you

42
00:03:07,240 --> 00:03:09,260
install any one of these.

43
00:03:09,370 --> 00:03:17,310
You will also get A compiler along with that or in some cases for some I.D. You have to install compilers

44
00:03:17,310 --> 00:03:23,370
separately IDE separate compilers separate and you have to integrate that compiler with the IDE .

45
00:03:23,590 --> 00:03:29,720
You have to do it and in some cases when you install IDEit will also install compiler.

46
00:03:30,340 --> 00:03:36,250
So setup an installation part is shown in the next section so from there you can learn and you can set

47
00:03:36,250 --> 00:03:38,220
up your own environment for development.

48
00:03:38,800 --> 00:03:42,310
So in that IDE write the program.

49
00:03:42,340 --> 00:03:45,220
So example program already you have taken here.

50
00:03:45,220 --> 00:03:48,420
Suppose I have written the program so editing is over.

51
00:03:48,670 --> 00:03:52,280
So we have finished  with editing now next compiling.

52
00:03:52,660 --> 00:03:58,780
I'll remove this next step is compiling suppose I have written this program I'm not going to explaining

53
00:03:58,820 --> 00:04:02,000
the program so this will be going in the next section.

54
00:04:02,000 --> 00:04:04,960
So just a program is there, a C++ program.

55
00:04:05,210 --> 00:04:11,970
Suppose I have written the program and file name is first.cpp this is a C++ program

56
00:04:11,980 --> 00:04:12,310
file

57
00:04:13,030 --> 00:04:17,110
If I type this in IDE edit it I should save it.

58
00:04:17,260 --> 00:04:19,660
So if it is saved then it will be on the hard disk

59
00:04:19,660 --> 00:04:21,810
So here it is on the hard disk.

60
00:04:22,180 --> 00:04:25,970
So I have written a program so it is saved in a file.

61
00:04:26,020 --> 00:04:34,310
that is first.cpp so there's a source code and c++ compiler based language.

62
00:04:34,330 --> 00:04:40,900
So next thing to have to do compile it so if I call the compiler from IDE options will be available

63
00:04:40,910 --> 00:04:47,260
you can call the compiler and if you call the compiler compiler will convert this into machine code

64
00:04:47,500 --> 00:04:56,140
and let us say it gives first.exe file on window Based machine that EXE extension depends on Windows

65
00:04:56,140 --> 00:04:57,060
based machine.

66
00:04:57,100 --> 00:05:01,800
Most of the user who use Windows so I'm using extension.exe.

67
00:05:01,930 --> 00:05:03,410
It means executable file.

68
00:05:03,820 --> 00:05:08,330
Now how that exe file looks like see in my program there are two pieces.

69
00:05:08,380 --> 00:05:14,320
One is a function called Max and another is a function called main and at the end inside main and I should have

70
00:05:14,350 --> 00:05:16,580
written zero because it is returning.

71
00:05:16,660 --> 00:05:22,540
So there are two functions max function and main function so machine codelooks like this.

72
00:05:22,540 --> 00:05:25,530
This is Max function machine code of Max.

73
00:05:25,780 --> 00:05:28,930
And this is main function machine code of main.

74
00:05:29,920 --> 00:05:34,930
So two pieces of code will be there that this is a separate file.

75
00:05:34,960 --> 00:05:42,180
So here are file will be stored on the hard disk that is first.exe and this is a machine code

76
00:05:42,210 --> 00:05:42,700
file.

77
00:05:43,330 --> 00:05:49,000
Let us say that is generated who generated that Compiler, Compiler will convert this .

78
00:05:49,160 --> 00:05:50,860
If there are no errors here.

79
00:05:50,950 --> 00:05:55,010
If there are any errors it will highlight and show you the errors and ask you to remove them.

80
00:05:55,120 --> 00:05:58,060
If you have removed them perfectly then you get that file.

81
00:05:58,730 --> 00:06:01,140
So compilation is over now.

82
00:06:01,150 --> 00:06:05,620
Next thing this is a during compilation along with the compilation only.

83
00:06:05,800 --> 00:06:06,470
This is over.

84
00:06:06,580 --> 00:06:09,370
Now we will pickup this linking of library.

85
00:06:09,460 --> 00:06:12,700
What is this ? see for writing the programs.

86
00:06:12,730 --> 00:06:17,910
We need a lot of things that are actually available inside the language.

87
00:06:17,950 --> 00:06:24,160
So language provide some built in  code element code that makes it easy for us to write the programs.

88
00:06:24,160 --> 00:06:30,010
If that ready made code is not there then you have to do a lot of work before even doing a smaller task

89
00:06:30,280 --> 00:06:35,630
like one thing as a reading something from the keyboard  or printing something on the monitor.

90
00:06:35,740 --> 00:06:36,170
Right.

91
00:06:36,250 --> 00:06:37,670
Saving something in a file.

92
00:06:38,080 --> 00:06:43,330
So in mathematical operations like the Cos and sin. log calculating these things.

93
00:06:43,450 --> 00:06:51,920
So for various operation build in functions or classes are available in C++ that are available in header

94
00:06:51,950 --> 00:06:55,390
files or library files.

95
00:06:55,450 --> 00:07:00,580
So there's a header file we include and supporting with this one is a library file that is having

96
00:07:00,580 --> 00:07:03,070
the machine code readily available.

97
00:07:04,460 --> 00:07:06,690
So let me show you here in my program.

98
00:07:06,770 --> 00:07:09,610
See all these things are my own means.

99
00:07:09,650 --> 00:07:10,840
I have defined them.

100
00:07:11,060 --> 00:07:13,740
Then what does this c out std, c out.

101
00:07:13,910 --> 00:07:18,170
this is a build in object level  in C++ that is useful for printing.

102
00:07:18,170 --> 00:07:22,100
If you look inside the main function these are the variables.

103
00:07:22,100 --> 00:07:24,260
This is a max function where is Max.

104
00:07:24,290 --> 00:07:27,030
Here is Max then C already C out.

105
00:07:27,030 --> 00:07:28,540
It is there iostream.

106
00:07:28,550 --> 00:07:34,410
I have included it so machine code for that C out should also be included right.

107
00:07:34,430 --> 00:07:39,720
So yes that will also be included in my first.exe.

108
00:07:39,740 --> 00:07:45,040
This is the machine code for c out machine code for c in and many more.

109
00:07:45,050 --> 00:07:52,370
Whatever available here iosteam.h so iostream is the header file  and that is

110
00:07:52,370 --> 00:07:54,390
supported by Library file.

111
00:07:54,770 --> 00:07:59,480
So when you are using the library means the machine code of the library will be copied in

112
00:07:59,480 --> 00:08:01,550
your exe file.

113
00:08:02,420 --> 00:08:03,310
That's it.

114
00:08:03,320 --> 00:08:09,530
So this process is called us linking of libraries that libraries link with your program.

115
00:08:09,830 --> 00:08:13,860
So link means file is not linked the contend is so far copied in here.

116
00:08:13,900 --> 00:08:19,760
EXE file and this is one of the important thing  which ever the function that you're using their machine

117
00:08:19,760 --> 00:08:22,220
code will be copied in your file.

118
00:08:22,250 --> 00:08:26,640
Actually the header file you use entire header if I will be copied it fine.

119
00:08:26,930 --> 00:08:29,150
So we should be careful if you're not using.

120
00:08:29,150 --> 00:08:31,920
Don't include the header files.

121
00:08:32,059 --> 00:08:32,690
This is all.

122
00:08:33,049 --> 00:08:35,039
So now the exe is ready.

123
00:08:35,210 --> 00:08:40,669
This is done after the compilation along with the compilation process everything is already there.

124
00:08:40,669 --> 00:08:40,970
Right.

125
00:08:41,929 --> 00:08:42,559
Now.

126
00:08:42,830 --> 00:08:46,730
File is already exe program is ready so till here.

127
00:08:46,750 --> 00:08:48,250
Development work is over.

128
00:08:48,520 --> 00:08:51,300
So this is development closed.

129
00:08:51,760 --> 00:08:55,870
Now 2 steps for execution booster for execution.

130
00:08:55,870 --> 00:08:59,720
Now I want to run the program so far running the program.

131
00:08:59,830 --> 00:09:05,380
First of all this exefile the content that is machine code should be brought into the main memory.

132
00:09:05,380 --> 00:09:09,990
I've been telling you this in the previous videos also so it should be brought into the main memory.

133
00:09:10,090 --> 00:09:11,650
So does this is the main memory.

134
00:09:11,650 --> 00:09:18,580
So this main memory we will study a little bit that main memory is divided in two three logical sections

135
00:09:18,700 --> 00:09:19,560
and it is used.

136
00:09:20,350 --> 00:09:23,560
So there are three Section One is the code section.

137
00:09:23,560 --> 00:09:29,650
Another one is a stack from the top and this middle one is a heap so it is divided into three sections

138
00:09:30,550 --> 00:09:33,640
sometimes for explanation I write stock here and him.

139
00:09:33,730 --> 00:09:36,670
So basically there are three sections right  where there they are.

140
00:09:36,670 --> 00:09:37,430
That is a different thing.

141
00:09:38,050 --> 00:09:41,770
So let us see how it will run. for running the program.

142
00:09:41,770 --> 00:09:47,540
This program code machine code has to be brought into the main memory which area code section.

143
00:09:47,540 --> 00:09:54,260
So all this machine code will be copied in this code section Max machine or main machine code.

144
00:09:54,550 --> 00:09:55,860
And so on.

145
00:09:56,060 --> 00:09:59,220
So I don't have space to show all. for that machine code copied.

146
00:10:00,100 --> 00:10:07,840
This is called us loading bringing up program from hard disk to the main memory for getting it executed

147
00:10:07,840 --> 00:10:09,020
by CPU.

148
00:10:09,040 --> 00:10:13,570
This process is called loading bringing it here inside the main memory.

149
00:10:13,570 --> 00:10:14,250
It's loading.

150
00:10:14,260 --> 00:10:21,940
So this loading process is also important process and while loading whatever the arrangements are required

151
00:10:22,570 --> 00:10:23,380
that are done.

152
00:10:23,410 --> 00:10:24,470
So that arrangement.

153
00:10:24,490 --> 00:10:28,480
We don't have to go in detail that is called as relocation.

154
00:10:28,570 --> 00:10:35,200
So all of these things are done by operating system operating system will bring that from

155
00:10:35,200 --> 00:10:37,050
hard disk to the main memory.

156
00:10:37,150 --> 00:10:42,190
I'm not showing that in this picture it is that in the memory already  it is that operating system is running

157
00:10:42,190 --> 00:10:45,340
so it will bring the program into the main memory right.

158
00:10:45,610 --> 00:10:50,830
Then after bringing it it will ask the CPU to start executing the program from the first line.

159
00:10:50,830 --> 00:10:56,470
So here is the main function so it will give the address of the main function and CPU will start executing

160
00:10:56,470 --> 00:11:02,470
that program and that machine code will execute and it will utilize all the functions whatever the machine

161
00:11:02,470 --> 00:11:03,840
code is it will run

162
00:11:05,440 --> 00:11:07,990
So that's about execution now.

163
00:11:08,080 --> 00:11:10,060
Little bit more toward the execution.

164
00:11:10,090 --> 00:11:11,700
Now last step I'm showing.

165
00:11:12,130 --> 00:11:14,830
Once the CPU is given their address it will start executing.

166
00:11:14,830 --> 00:11:22,090
So if you look into the program this is an instruction, instruction this is instruction this is an instruction

167
00:11:22,320 --> 00:11:29,160
this is an instruction but this ABC is a data variable, X Y are the variable.

168
00:11:29,170 --> 00:11:30,160
This is variable.

169
00:11:30,160 --> 00:11:31,240
These are the variables.

170
00:11:31,310 --> 00:11:33,700
Now for the variables also space should be there.

171
00:11:34,000 --> 00:11:39,030
So for the variable space is taken here inside stack.

172
00:11:39,250 --> 00:11:42,470
This is taken inside stack right.

173
00:11:42,760 --> 00:11:50,280
So those variables will be created inside the stack during execution of a program that are created there

174
00:11:50,290 --> 00:11:51,000
inside.

175
00:11:51,130 --> 00:11:58,630
So stack is useful for variable creation and code section is useful for program itself.

176
00:11:58,730 --> 00:12:00,740
Heap. what is the use of heap.

177
00:12:01,060 --> 00:12:03,420
It is used for dynamic memory allocation.

178
00:12:04,000 --> 00:12:06,280
So we are going to learn more about this stack.

179
00:12:06,280 --> 00:12:10,000
heap and all in later sections we will learn about this in detail.

180
00:12:10,000 --> 00:12:11,250
This is sufficient here.

181
00:12:11,290 --> 00:12:15,310
Just the introduction that there is something called stag this something called Code section and heap

182
00:12:15,790 --> 00:12:24,070
that is sufficient so that's all about the steps for development and execution of a program.

183
00:12:24,070 --> 00:12:30,190
So this is how a program has developed and executed it now will be using IDEand we will writting .

184
00:12:30,190 --> 00:12:31,460
the programs.

185
00:12:31,600 --> 00:12:36,480
This is all behind the scene so we don't see all these things just we type the program in.

186
00:12:36,580 --> 00:12:38,720
So this is what all happening at the background.

187
00:12:39,970 --> 00:12:44,610
So that's all in this video and that's all in this section next section.

188
00:12:44,620 --> 00:12:53,490
As for setting up an IDE how to  install Xcord and chord blocks and devC++.

189
00:12:53,500 --> 00:12:59,370
I have shown that if you are already aware you already have of environment already have an IDE then

190
00:12:59,370 --> 00:13:02,740
you can skip that and you can directly start from next section.

